<script src="/js/d3.min.js"></script>
<script src="/js/geral.js"></script>
<style>
    .rTableRow {
        clear: both;
    }

    .rTableCell {
        float: left;
        padding: 3px 1.8%;
    }
    svg {
        font: 10px sans-serif;
    }

    .line {
        clip-path: url(#clip);
        fill: none;
        stroke: red;
        stroke-width: 1.5px;
    }

    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

    .brush .extent {
        stroke: #fff;
        fill-opacity: .125;
        shape-rendering: crispEdges;
    }

    .overlay {
        fill: none;
        pointer-events: all;
    }

    .focus circle {
        fill: none;
        stroke: steelblue;
    }

    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

    .x.axis path {
        display: none;
    }

    .line {
        fill: none;
        stroke: steelblue;
        stroke-width: 1.5px;
    }
</style>
<div class="container">
    <section class="main">
        <div>
            <h1><%= title %></h1>

            <div class="rTable">
                <div class="rTableRow">
                    <div class="rTableCell"><select id="select_ID1"></select></div>
                    <div class="rTableCell"><select id="select_SensorID1"></select></div>
                    <div class="rTableCell">
                        <button onclick="getData($('#select_ID1').val(), $('#select_SensorID1').val(), 2, draw,'#chart-container1');">
                            OK
                        </button>
                    </div>
                </div>
                <div class="rTableRow">
                    <div class="rTableCell"><select id="select_ID2"></select></div>
                    <div class="rTableCell"><select id="select_SensorID2"></select></div>
                    <div class="rTableCell">
                        <button onclick="getData($('#select_ID2').val(), $('#select_SensorID2').val(), 2, draw,'#chart-container2');">
                            OK
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <br>
        <br>
        <svg id="chart-container1"></svg>
        <svg id="chart-container2"></svg>
    </section>
</div>

<script>
    function draw(result, element) {
        var data = [];
        result.forEach(function (d) {
            var xyz = d["DataCollectionValue"].split(',');
            data.push({
                time: parseFloat(d["DataCollectionTime"]),
                x: parseFloat(xyz[0]),
                y: parseFloat(xyz[1]),
                z: parseFloat(xyz[2])
            });
        });

        var margin = {top: 10, right: 10, bottom: 100, left: 40};
        var margin2 = {top: 430, right: 10, bottom: 20, left: 40};
        var width = 500 - margin.left - margin.right;
        var height = 500 - margin.top - margin.bottom;
        var height2 = 500 - margin2.top - margin2.bottom;

        var color = d3.scale.category10();
        var bisectDate = d3.bisector(function (d) {
            return d.time;
        }).left;

        var x = d3.scale.linear().range([0, width]);
        var x2 = d3.scale.linear().range([0, width]);
        var y = d3.scale.linear().range([height, 0]);
        var y2 = d3.scale.linear().range([height2, 0]);

        var xAxis = d3.svg.axis().scale(x).orient("bottom");
        var xAxis2 = d3.svg.axis().scale(x2).orient("bottom");
        var yAxis = d3.svg.axis().scale(y).orient("left");

        var brush = d3.svg.brush()
                .x(x2)
                .on("brush", brushed);

        color.domain(d3.keys(data[0]).filter(function (key) {
            return key !== "time";
        }));

        var axis = color.domain().map(function (name) {
            return {
                name: name,
                values: data.map(function (d) {
                    return {time: d.time, value: d[name]};
                })
            };
        });

        x.domain([d3.min(axis, function (c) {
            return d3.min(c.values, function (v) {
                return v.time;
            });
        }), d3.max(axis, function (c) {
            return d3.max(c.values, function (v) {
                return v.time;
            });
        })]);
        y.domain([d3.min(axis, function (c) {
            return d3.min(c.values, function (v) {
                return v.value;
            });
        }), d3.max(axis, function (c) {
            return d3.max(c.values, function (v) {
                return v.value;
            });
        })]);
        x2.domain(x.domain());
        y2.domain(y.domain());

        var line = d3.svg.line()
                .x(function (d) {
                    return x(d.time);
                })
                .y(function (d) {
                    return y(d.value);
                })
                .interpolate("linear");

        var line2 = d3.svg.line()
                .x(function (d) {
                    return x2(d.time);
                })
                .y(function (d) {
                    return y2(d.value);
                })
                .interpolate("linear");

        d3.select(element).selectAll("*").remove();
        var svg = d3.select(element)
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom);

        svg.append("defs").append("clipPath")
                .attr("id", "clip")
                .append("rect")
                .attr("width", width)
                .attr("height", height);

        var focus = svg.append("g")
                .attr("class", "focus")
                .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var context = svg.append("g")
                .attr("class", "context")
                .attr("transform", "translate(" + margin2.left + "," + margin2.top + ")");

        var view = svg.append("g")
                .attr("class", "view")
                .attr("transform", "translate(" + (width-100) + ",0)")
                .style("display", "none");
        view.append("text")
                .attr("class", "pointX")
                .attr("x", 40)
                .attr("y", 10);
        view.append("text")
                .attr("class", "pointY")
                .attr("x", 40)
                .attr("y", 20);
        view.append("text")
                .attr("class", "pointZ")
                .attr("x", 40)
                .attr("y", 30);
        view.append("text")
                .attr("class", "time")
                .attr("x", 40)
                .attr("y", 40);

        focus.selectAll(".line")
                .data(axis)
                .enter()
                .append("path")
                .attr("class", "line axis")
                .attr("d", function (d) {
                    return line(d.values);
                })
                .style("stroke", function (d) {
                    return color(d.name);
                });

        focus.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height + ")")
                .call(xAxis)
                .append("text")
                .attr("x", width - 50)
                .attr("y", -10)
                .attr("dy", ".71em")
                .style("text-anchor", "end")
                .text("Milisseconds(ms)");

        focus.append("g")
                .attr("class", "y axis")
                .call(yAxis);

        context.selectAll(".line")
                .data(axis)
                .enter()
                .append("path")
                .attr("class", "line")
                .attr("d", function (d) {
                    return line2(d.values);
                })
                .style("stroke", function (d) {
                    return color(d.name);
                });

        context.append("g")
                .attr("class", "x axis")
                .attr("transform", "translate(0," + height2 + ")")
                .call(xAxis2);


        /*VER*/
        focus.selectAll(".line")
                .datum(function (d) {
                    return {name: d.name, values: d.values[d.values.length - 1]};
                })
                .append("text")
                .attr("transform", function (d) {
                    return "translate(" + x(d.values.time) + "," + y(d.values.value) + ")";
                })
                .attr("dy", ".35em")
                .text(function (d) {
                    return d.name;
                });
        /*VER*/


        context.append("g")
                .attr("class", "x brush")
                .call(brush)
                .selectAll("rect")
                .attr("height", height2 + 7);

        focus.append("rect")
                .attr("class", "overlay")
                .style("z-index", "100")
                .attr("width", width)
                .attr("height", height)
                .on("mouseover", function () {
                    view.style("display", null);
                })
                .on("mouseout", function () {
                    view.style("display", "none");
                })
                .on("mousemove", mousemove);

        function mousemove() {
            var i = bisectDate(data, x.invert(d3.mouse(this)[0]), 1);
            //view.attr("transform", "translate(" + x(data[i - 1].time) + ",0)");
            view.select(".pointX").text("x: " + data[i - 1].x);
            view.select(".pointY").text("y: " + data[i - 1].y);
            view.select(".pointZ").text("z: " + data[i - 1].z);
            view.select(".time").text("time: " + data[i - 1].time);
        }

        function brushed() {
            x.domain(brush.empty() ? x2.domain() : brush.extent());
            focus.selectAll("path").remove();
            focus.selectAll(".line")
                    .data(axis)
                    .enter()
                    .append("path")
                    .attr("class", "line axis")
                    .attr("d", function (d) {
                        return line(d.values);
                    })
                    .style("stroke", function (d) {
                        return color(d.name);
                    });
            focus.select(".x.axis").call(xAxis);
        }
    }
</script>

<!--SCRIPTS-->


<script>
    getData(40, 0, 2, draw,'#chart-container1');
    getData(40, 0, 2, draw,'#chart-container2');
</script>
<script>
    //INIT MAP
    selectTrackSession("#select_ID1");

    $("#select_ID1").change(function () {
        $("#select_SensorID1").find('option').remove();
        getListSensor("#select_SensorID1", $(this).val());
    });

    selectTrackSession("#select_ID2");

    $("#select_ID2").change(function () {
        $("#select_SensorID2").find('option').remove();
        getListSensor("#select_SensorID2", $(this).val());
    });
</script>

