<script src="/js/d3.min.js"></script>
<script src="/js/line-graph.js"></script>
<script src="/js/sample_data.js"></script>
<style>
  .line-graph text {
    cursor: default;
  }

  .line-graph .hover-line {
    stroke: #6E7B8B;
  }

  .line-graph .hide {
    opacity: 0;
  }

  .line-graph .axis {
    shape-rendering: crispEdges;
  }

  .line-graph .x.axis line {
    stroke: #D3D3D3;
  }

  .line-graph .x.axis .minor {
    stroke-opacity: .5;
  }

  .line-graph .x.axis path {
    display: none;
  }

  .line-graph .x.axis text {
    font-size: 10px;
  }

  .line-graph .y.axis line, .y.axis path {
    fill: none;
    stroke: #000;
  }

  .line-graph .y.axis text {
    font-size: 12px;
  }

  .line-graph .scale-button:not(.selected):hover {
    text-decoration: underline;
    cursor: pointer !important;
  }

  .line-graph .date-label {
    fill: #6E7B8B;
  }
</style>
<div class="container">
  <section class="main">
    <div>
      <h1><%= title %></h1>
    </div>
    <div>
      <select id="portCom" name="listSerialPorts">
        <% for(var i = 0; i < listSerialPorts.length; i++) { %>
        <option value="<%= listSerialPorts[i] %>"><%= listSerialPorts[i] %></option>
        <% } %>
      </select>
    </div>
    <div>
      <select id="sensorN" name="listSensors">
        <% for(var i = 0; i < listSensors.length; i++) { %>
        <option value="<%= listSensors[i] %>"><%= listSensors[i] %></option>
        <% } %>
      </select>
    </div>
    <div>
      <select id="type" name="listTypes">
        <% for(var i = 0; i < listTypes.length; i++) { %>
        <option value="<%= listTypes[i] %>"><%= listTypes[i] %></option>
        <% } %>
      </select>
    </div>
    <div>
      <a onclick="initSocket()" class="btn btn-info" role="button">OK</a>
    </div>
    <div id="graph1" class="aGraph" style="position:relative;width:100%;height:400px"></div>
    <!--<div id="graph2" class="aGraph" style="position:relative;width:100%;height:400px"></div>-->

  </section>
</div>
<script>

  function initSocket() {

    console.log("portCom: " + $('#portCom').val() + " sensorN: " + $('#sensorN').val() + " type: " + $('#type').val());

    $.ajax({
      url: "/testegraph/accelerationRealTime",
      type: "get",
      data: {
        portCom: $('#portCom').val(),
        sensorN: $('#sensorN').val(),
        type: $('#type').val()
      },
      success: function (data, textStatus, jqXHR) {
        console.log(data);
      }
    });
  }

  data1["displayNames"] = ["x", "y", "z"];
  data1["colors"] = ["red", "green", "blue"];
  data1["rounding"] = [2, 2, 2];
  data1["scale"] = "linear";//data["scale"] = "pow";
  data1["displayScale"] = false;
  data1["displayData"] = false;
  data1["displayLegend"] = true;

  var l1 = new LineGraph({containerId: 'graph1', data: data1});

  var socket = io();

  io.socket.on('connect', function () {
    //console.log(io.socket.emit);
    socket.emit('addSensor', [1], ['MAC']);
  });

  io.socket.on('updatechart', function (dataSocket) {
    console.log(dataSocket);
    // Add new
    var newDataMAC = [];
    //var newDataMGY = [];

    data1.values[0].shift();
    data1.values[1].shift();
    data1.values[2].shift();

//        data2.values[0].shift();
//        data2.values[1].shift();
//        data2.values[2].shift();

    if (dataSocket != {}) { //if (dataSocket.MAC != {}) {
      newDataMAC = [[dataSocket.MAC.x], [dataSocket.MAC.y], [dataSocket.MAC.z]];

//        if (dataSocket.MGY != {}) {
//            newDataMGY = [[dataSocket.MGY.x], [dataSocket.MGY.y], [dataSocket.MGY.z]];
//        }
      //console.log("TESTE: " + dataSocket);
      dataT.values = newDataMAC;
      dataT.start = dataT.start + dataT.step;
      dataT.end = dataT.end + dataT.step;

//        dataV.values = newDataMGY;
//        dataV.start = dataV.start + dataV.step;
//        dataV.end = dataV.end + dataV.step;

      l1.slideData(dataT);
//        l2.slideData(dataV);
    }
  });
  /*
   },
   error: function (jqXHR, textStatus, errorThrown) {
   console.log("ERROR");
   }
   });
   }
   */
</script>
<!--SCRIPTS-->
