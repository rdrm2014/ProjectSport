<script src="/js/d3.min.js"></script>
<script src="/js/geral.js"></script>
<script type="text/javascript" src="/js/lodash.min.js"></script>
<!--STYLE-->
<style>
    .rTableRow {
        clear: both;
    }

    .rTableCell {
        float: left;
        padding: 3px 1.8%;
    }
    body {
        padding-bottom: 20px;
    }

    #chart-container {
        font: 12px sans-serif;
    }

    .axis text {
        font: 10px sans-serif;
    }

    .axis path,
    .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

    path {
        stroke-width: 1;
        fill: none;
    }

    svg {
        float: left;
    }

    g.heatmap circle {
        opacity: 0.05;
    }

    #timer {
        font-size: 16px;
    }

</style>
<!--STYLE-->
<div class="container">
    <section class="main">
        <div>
            <h1><%= title %></h1>
            <div class="rTable">
                <div class="rTableRow">
                    <div class="rTableCell"><select id="select_ID1"></select></div>
                    <div class="rTableCell"><select id="select_SensorID1"></select></div>
                    <div class="rTableCell">
                        <button onclick="getData($('#select_ID1').val(), $('#select_SensorID1').val(), 2, draw);">
                            OK
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <br>
        <br>
        <div id="chart-container">
            <div id='timer'></div>
            <div class='row'>
                <svg id="chart_zx"></svg>
                <svg id="chart_zy"></svg>
                <svg id="chart_xy"></svg>
            </div>
        </div>
    </section>
</div>

<script src="/js/simple2d.js"></script>
<script src="/js/kcharts_heatmap.js"></script>
<script>
    function getChart(_data, xCol, yCol, range) {
        range = typeof range !== 'undefined' ? range : getMaxRange(_data);

        var data = _data.map(function (d) {
                    return d.slice(range[0], range[1]).map(function (d) {
                        return {'x': +d[xCol], 'y': +d[yCol]};
                    });
                }),

                chart = new kcharts.Simple2D();
        chart.data(data)
                .xDomain(kcharts.getDataExtent(_.flatten(data), 'x'))
                .yDomain(kcharts.getDataExtent(_.flatten(data), 'y'))
                .xLabel('acc. ' + xCol)
                .yLabel('acc. ' + yCol)
                .showLinePathFlag(false)
                .showHeatmapFlag(true)
                .width(350)
                .height(350);
        return chart;
    }

    function getMaxRange(datas) {
        var ls = datas.map(function (d) {
                    return d.length;
                }),
                maxRange = d3.min(ls);
        return [0, maxRange];
    }

    function getTimeString(t) {
        var tS = Math.floor(t / 1000),
                tMs = t / 1000 - tS;
        return ('00' + tS).slice(-2) + ':' + tMs.toFixed(2).slice(2) + 's';
    }

    var DEFAULT_TAILLENGTH = 700;
    var DEFAULT_STEPSIZE_MS = 60;
    var timer;

    function tripleStepper(data, axes, range, tailLength, stepSize) {
        axes = typeof axes !== 'undefined' ? axes : [['z', 'x'], ['z', 'y'], ['x', 'y']];
        range = typeof range !== 'undefined' ? range : getMaxRange(data);
        tailLength = typeof tailLength !== 'undefined' ? tailLength : DEFAULT_TAILLENGTH;
        stepSize = typeof stepSize !== 'undefined' ? stepSize : DEFAULT_STEPSIZE_MS;

        var charts = [];
        axes.forEach(function (axis) {
            var id = axis[0] + axis[1];
            charts.push({id: id, chart: getChart(data, axis[0], axis[1], range)});
            d3.select('#chart_' + id).selectAll("*").remove();
            d3.select('#chart_' + id).append('image')
                    .attr('xlink:href', '/images/heapmap/axis_' + id + '.png')
                    .attr('width', 100)
                    .attr('height', 100)
                    .attr('x', 350 - 130)
                    .attr('y', 50);
        });

        function Stepper(stepSize, tailLength) {
            var time = 0;
            this.step = function () {
                charts.forEach(function (d) {
                    d3.select("#chart_" + d.id).datum(d.chart.data().map(function (d) {
                        return d.slice(d3.max([time - tailLength, 0]), time + 1);
                    })).call(d.chart);
                });
                time = (range[0] + time + stepSize) % (range[1]);
                d3.select('#timer').html('Time: ' + getTimeString(time * DEFAULT_STEPSIZE_MS));
            };
        }

        timer = setInterval(new Stepper(4, tailLength).step, stepSize * 4);
    }

    function draw(result) {
        clearInterval(timer);
        var data = [];
        result.forEach(function (d) {
            var xyz = d["DataCollectionValue"].split(',');
            data.push({time: d["DataCollectionTime"], x: xyz[0], y: xyz[1], z: xyz[2]});
        });
        // Para mais datasets tripleStepper([data, data1,data2]);
        tripleStepper([data]);
    }
</script>
<script>
    getData(41, 0, 2, draw);
</script>
<script>
    //INIT MAP
    selectTrackSession("#select_ID1");

    $("#select_ID1").change(function () {
        $("#select_SensorID1").find('option').remove();
        getListSensor("#select_SensorID1", $(this).val());
    });
</script>
